name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1  # Tokyo region
  ECR_REPOSITORY: chat-ui
  NODE_VERSION: '22'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check || echo "No format check script found"

      - name: Run linting
        run: npm run lint || echo "No lint script found"

      - name: Type checking
        run: npm run check || echo "No type check script found"

      - name: Build application
        run: npm run build

      # - name: Run security audit
        # run: npm audit --audit-level high --production

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get account ID
        id: get-account
        run: echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Ensure App Runner roles exist (AccessRole + InstanceRole)
        env:
          ACCOUNT_ID: ${{ steps.get-account.outputs.account_id }}
        run: |
          set -euo pipefail
          ACCESS_ROLE_NAME="AppRunnerECRAccessRole"
          INSTANCE_ROLE_NAME="ChatUIAppRunnerServiceRole"

          # Access Role: for App Runner to pull from ECR (trust = build.apprunner.amazonaws.com)
          if ! aws iam get-role --role-name "$ACCESS_ROLE_NAME" >/dev/null 2>&1; then
            aws iam create-role --role-name "$ACCESS_ROLE_NAME" \
              --assume-role-policy-document '{
                "Version":"2012-10-17",
                "Statement":[{"Effect":"Allow","Principal":{"Service":"build.apprunner.amazonaws.com"},"Action":"sts:AssumeRole"}]
              }'
            aws iam attach-role-policy --role-name "$ACCESS_ROLE_NAME" \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
          fi

          # Instance Role: runtime 權限（trust = tasks.apprunner.amazonaws.com）
          if ! aws iam get-role --role-name "$INSTANCE_ROLE_NAME" >/dev/null 2>&1; then
            aws iam create-role --role-name "$INSTANCE_ROLE_NAME" \
              --assume-role-policy-document '{
                "Version":"2012-10-17",
                "Statement":[{"Effect":"Allow","Principal":{"Service":"tasks.apprunner.amazonaws.com"},"Action":"sts:AssumeRole"}]
              }'
            # 這裡先給範例最小集讀取權限，依你實際用到的 SSM/Secrets ARN 再收斂
            cat > /tmp/instance-inline.json <<'POLICY'
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "ReadSecretsManager",
                  "Effect": "Allow",
                  "Action": ["secretsmanager:GetSecretValue"],
                  "Resource": [
                    "arn:aws:secretsmanager:ap-northeast-1:*:secret:chat-ui/*"
                  ]
                },
                {
                  "Sid": "ReadSSMParams",
                  "Effect": "Allow",
                  "Action": ["ssm:GetParameter","ssm:GetParameters","ssm:GetParametersByPath"],
                  "Resource": [
                    "arn:aws:ssm:ap-northeast-1:*:parameter/chat-ui/*"
                  ]
                }
              ]
            }
            POLICY
            aws iam put-role-policy --role-name "$INSTANCE_ROLE_NAME" --policy-name ChatUIAppRunnerRuntimeAccess --policy-document file:///tmp/instance-inline.json
          fi

      - name: Deploy to AWS App Runner
        env:
          ACCOUNT_ID: ${{ steps.get-account.outputs.account_id }}
          IMAGE_URI: ${{ needs.build-and-push.outputs.image-uri }}
        run: |
          set -euo pipefail
          SERVICE_NAME="chat-ui-prod"
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${SERVICE_NAME}'].ServiceArn" --output text)

          ACCESS_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/AppRunnerECRAccessRole"
          INSTANCE_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/ChatUIAppRunnerServiceRole"

          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ]; then
            echo "Creating new App Runner service..."
            aws apprunner create-service \
              --service-name "${SERVICE_NAME}" \
              --source-configuration "{
                \"ImageRepository\": {
                  \"ImageIdentifier\": \"${IMAGE_URI}\",
                  \"ImageRepositoryType\": \"ECR\",
                  \"ImageConfiguration\": {
                    \"Port\": \"3000\",
                    \"RuntimeEnvironmentVariables\": {
                      \"NODE_ENV\": \"production\"
                    },
                    \"RuntimeEnvironmentSecrets\": {
                      \"MONGODB_URL\": \"arn:aws:ssm:ap-northeast-1:${ACCOUNT_ID}:parameter/chat-ui/mongodb-url\",
                      \"HF_TOKEN\": \"arn:aws:ssm:ap-northeast-1:${ACCOUNT_ID}:parameter/chat-ui/hf-token\",
                      \"OPENAI_API_KEY\": \"arn:aws:ssm:ap-northeast-1:${ACCOUNT_ID}:parameter/chat-ui/openai-key\",
                      \"PUBLIC_ORIGIN\": \"arn:aws:ssm:ap-northeast-1:${ACCOUNT_ID}:parameter/chat-ui/public-origin\"
                    }
                  }
                },
                \"AuthenticationConfiguration\": {
                  \"AccessRoleArn\": \"${ACCESS_ROLE_ARN}\"
                },
                \"AutoDeploymentsEnabled\": true
              }" \
              --instance-configuration "{
                \"Cpu\": \"0.25 vCPU\",
                \"Memory\": \"0.5 GB\",
                \"InstanceRoleArn\": \"${INSTANCE_ROLE_ARN}\"
              }"
          else
            echo "Updating existing App Runner service..."
            aws apprunner start-deployment --service-arn "$SERVICE_ARN"
          fi
